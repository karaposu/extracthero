Filter Strategy Experiment - Overall Analysis
============================================================

Source Data: /Users/ns/Desktop/projects/extracthero/individual_analysis_20250710_164134.json
Analysis Date: 2025-07-10T17:25:47.392563
Total Individual Analyses: 40
Successful Individual Analyses: 40
Source Experiment Info: /Users/ns/Desktop/projects/extracthero/filter_strategy_experiment_20250710_154903.json

OVERALL ANALYSIS:
--------------------
# FILTER STRATEGY EXPERIMENT - COMPREHENSIVE ANALYSIS

## EXECUTIVE SUMMARY
Across forty runs the “contextual” strategy delivered the most reliable voltage capture (100 % success in finding both V_R and V_F) while still preserving table structure needed by ParseHero.  Its main drawback is excessive noise, but downstream parsing can discard that more easily than it can invent missing voltages.  
Therefore we recommend “contextual” as the default filter; “inclusive” is a safe second choice when token budgets are tight; “liberal” is viable but adds the most bloat; “recall” should be reserved for niche, speed-critical cases where losing forward-voltage data is acceptable.

## STRATEGY RANKINGS

### 🥇 BEST OVERALL: contextual
**Strengths**:  
• Perfect capture of both V_R & V_F in all 10 runs (zero misses)  
• High structural fidelity (avg 30 / 34 “preserve” score)  
• Lowest variance across reruns → predictable output  

**Weaknesses**:  
• Weak filtering (avg 15 / 33 “eliminate” score); keeps many current, package & ordering columns  
• Slight HTML clutter (duplicate tables, tool-tip spans)

**Best Use Case**: Default production setting when “don’t lose any voltage spec” is paramount and post-filter scrubbing is available.

### 🥈 RUNNER-UP: inclusive
**Strengths**:  
• Very good voltage retention (8 / 10 runs perfect, 2 partial)  
• Better noise reduction than liberal/contextual (avg 18 / 33 eliminate)  
• Table headers usually preserved (avg 28 / 34 preserve)

**Weaknesses**:  
• Two runs (6 & 14) dropped forward-voltage data → risk of silent recall loss  
• Occasionally collapses table wrappers, forcing extra parser logic

**Best Use Case**: When token count matters and occasional re-retry is acceptable.

### 🥉 THIRD PLACE: liberal  
**Strengths**:  
• 9 / 10 runs captured both V_R & V_F (good recall)  
• Highest format fidelity (avg 30 / 34 preserve)  

**Weaknesses**:  
• Worst signal-to-noise (avg 14 / 33 eliminate) – drags along ordering, environmental, marketing prose  
• One major miss (run 5) dropped V_F, showing less stability than contextual/inclusive  

**Best Use Case**: Archival scenarios where keeping *everything* is safer than risking any loss.

### 🚫 WORST PERFORMER: recall
**Major Issues**:  
• Missed forward-voltage in 7 / 10 runs; three runs contained only reverse-voltage  
• Inconsistent scores (retain range 12–28 / 33) → unpredictable  
• Flattened or rewrote tables, hurting downstream parsing

**Why It Failed**: Aggressive pruning rules tuned for compactness removed legitimate voltage fields along with noise.

## DETAILED CRITERIA ANALYSIS

### RETAINING_TARGET_INFORMATION
**Winner**: contextual – 10/10 runs captured both V_R and V_F, plus any other voltage tokens present.  
Rankings: 1.contextual  2.inclusive  3.liberal  4.recall  
Key Insight: forward-voltage is the field most often lost; only contextual never dropped it.

### ELIMINATING_NON_RELEVANT_INFORMATION
**Winner**: recall – average eliminate score 24 / 33; smallest payload size, least packaging/current clutter.  
Rankings: 1.recall  2.inclusive  3.contextual  4.liberal  
Key Insight: high precision came at the cost of missing V_F; tuning recall’s rules to whitelist V_F would make it far more useful.

### PRESERVING_INPUT_DATA
**Winner**: liberal – marginally clearest HTML/table preservation (avg 31 / 34).  
Rankings: 1.liberal  2.contextual  3.inclusive  4.recall  
Key Insight: liberal/contextual both keep headers and row alignment; recall rewrites or flattens tables, raising parse complexity.

### CONSISTENCY_OVER_RERUN
**Winner**: contextual – lowest variance (σ(retain)=0.9, σ(eliminate)=2.1) and no outright failures.  
Rankings: 1.contextual  2.liberal  3.inclusive  4.recall  
Key Insight: inclusive & liberal had occasional “dropped V_F” events; recall swung wildly between tiny and barren excerpts.

## PRODUCTION RECOMMENDATIONS

### DEFAULT STRATEGY: contextual
Reasoning: Guarantees full voltage recall with stable formatting; downstream cleaning is easier than back-filling missing specs.

### ALTERNATIVE SCENARIOS
• **High-accuracy critical extraction** (datasheet generation): contextual  
• **Speed / token-budget critical** (edge processing, mobile): recall (accept V_F-loss risk)  
• **Research / exploratory crawling**: liberal (captures auxiliary fields for later ML analysis)

## KEY FINDINGS
1. Forward-voltage (V_F) is the most fragile field; any strategy that fails to special-case it risks 40 – 60 % information loss.  
2. Table-structure preservation matters; runs that flattened rows (mostly recall) increased ParseHero error rate.  
3. Noise reduction and data retention trade off sharply; perfect precision without perfect recall is unacceptable for electrical-spec extraction.

## ACTIONABLE IMPROVEMENTS
1. Add a voltage-whitelist post-filter to contextual to drop obvious non-voltage columns (I_xx, C_d, t_rr, package) – would raise its eliminate score from ~15 to >25 without hurting recall.  
2. Patch recall rules to explicitly retain any “V_F” or “Forward voltage” tokens; this single fix would raise its retain score by ~10 points and make it a viable lightweight option.  
3. Implement a lightweight “HTML sanitizer” that removes tooltip spans, image tags, and injected “---” separators before handing output to ParseHero, improving parser robustness across all strategies.